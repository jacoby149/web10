[USER USE CASE]

1.0.9 (clean up! fix breaks!)
1. switch the web10 api to pipenv
2. use .env file with pipenv instead of settings.py
3. make an app review UI for admins to change app visibility. 
    - public [discoverable by anyone]
    - unlisted [only by link]
    - banned [only by admin]
    - certified, uncertified toggle too.
4. use hard coded credentials in settings.py 
    - APP_STORE_ADMIN_USERNAME
    - APP_STORE_ADMIN_PASSWORD
make an app view page to see description of an app + visibility
5. make the app store paginated.
6. make an app description page per app.
7. attach _address + _time to records
8. Implement automatic tiered token protection
    - so another web10 provider can't impersonate you, because a dev didn't use tiered tokens.
[ At this point, web10 isn't broken... ]
    web10 env vars are in a good system.
    people cant put up some fuckshit on my app store.
    information on "who", and "when" on web10 is reliable.

1.0.10
1. wapi encryption interface
2. encryptor mobile app
    * encryption
    * P2P connection
3. email based key recovery
4. encryptor demo app.
5. put encrpytor SDK up for download.
[ At this point, the user use case for web10 is fulfilled.]
    user can write notes, and they are safely encrypted on web10.


1.0.11
3. get auth2 SMRs working.
    - SIRs
    - SCRs
4. new app sign up ONE click.
5. app log in ZERO clicks.
6. separate the auth2 from the app store! 
7. eliminate the old authenticator.
8. get exporter / importer working! [perhaps some simple searching.]
9. get auth2 data viewer [RAW JSON] working.
[ At this point, the user experience for note taking, the initial use case is SEAMLESS!!! ]

---
[Dev Use Case]
- Make a simple todo app.
- Make a good notes app.
- Clean up web10 social.
Bake them into the web10 cli.

---

make subservices
    - protect it as follows
        allow apps to CRUD subservices
            - for the signed in user
            - for the services authorized to the app.
enforce subservice rules.

BEFORE THIS, MAKE THE RED SHIELD DEMO...
1.0.12 [Instagram Pilot]
fix the web10 social messaging glitches
add webRTC to the web10 social posts

    * export/import keys
    * google cloud sync/backup
document encryption

1.1.5
TODO get email verification working via. sendgrid.
fix the null deletion issue
get searching working.
web10 should have some kind of groups...
debug the functionality improvements don't break any legacy functionality.
    - pagination OF app store 
    - dollar sign stuff with the reads
    - new wapi library improvements
web10 read pay system [pay to read other users stuff.]

1.1.6
Make a web10 Kafka messaging queue +
redis cache to speed up redundant web10 reads